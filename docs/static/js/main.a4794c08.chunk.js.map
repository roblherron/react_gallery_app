{"version":3,"sources":["components/Photo.js","components/NotFound.js","components/PhotoContainer.js","config.js","components/Search.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Photo","props","url","data","server","farm","id","secret","className","src","alt","NotFound","this","searchQuery","Component","PhotoContainer","updatePhotosState","queryString","location","search","URLSearchParams","get","console","log","axios","then","response","setState","photos","photo","catch","error","state","prevProps","prevState","map","index","length","Search","onSearchChange","e","searchTerm","target","value","searchValue","handleSubmit","preventDefault","history","push","pathname","newSearchValue","onSubmit","type","onChange","name","placeholder","withRouter","Nav","to","App","basename","exact","path","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"4PAWeA,EATD,SAACC,GACb,IAAMC,EAAG,wCAAoCD,EAAME,KAAKC,OAA/C,YAAyDH,EAAME,KAAKE,KAApE,YAA4EJ,EAAME,KAAKG,GAAvF,YAA6FL,EAAME,KAAKI,OAAxG,QACT,OACE,oBAAIC,UAAU,kBAAd,SACE,qBAAKC,IAAKP,EAAKQ,IAAI,GAAGF,UAAU,uBCJjBG,E,uKAEjB,OACE,sBAAKH,UAAU,YAAf,UACE,kDACA,kDAAqBI,KAAKX,MAAMY,YAAhC,mC,GAL8BC,aCcjBC,E,kDACnB,aAAe,IAAD,8BACZ,gBAmBFC,kBAAoB,WAClB,IAAMC,EAAc,EAAKhB,MAAMiB,SAASC,OAElCN,EADY,IAAIO,gBAAgBH,GACRI,IAAI,KAClCC,QAAQC,IAAIV,GACZW,IACGH,IADH,oFC1CS,mCD0CT,iBAEgGR,EAFhG,8CAIGY,MAAK,SAACC,GACL,EAAKC,SAAS,CACZC,OAAQF,EAASvB,KAAKyB,OAAOC,WAGhCC,OAAM,SAACC,GACNT,QAAQC,IAAI,mCAAoCQ,OAhCpD,EAAKC,MAAQ,CACXJ,OAAQ,IAJE,E,gEAUZhB,KAAKI,sB,yCAGYiB,EAAWC,GAExBD,EAAUf,SAASC,SAAWP,KAAKX,MAAMiB,SAASC,QACpDP,KAAKI,sB,+BAuBC,IAAD,OACDC,EAAcL,KAAKX,MAAMiB,SAASC,OAElCN,EADY,IAAIO,gBAAgBH,GACRI,IAAI,KAC5BO,EAAShB,KAAKoB,MAAMJ,OAAOO,KAAI,SAACN,EAAOO,GAAR,OACnC,cAAC,EAAD,CAAOjC,KAAM,EAAK6B,MAAMJ,OAAOQ,IAAaP,EAAMvB,OAEpD,OAAKM,KAAKX,MAAMiB,SAASC,OAOrBP,KAAKoB,MAAMJ,OAAOS,OAAS,EACtB,cAAC,EAAD,CAAUxB,YAAaA,IAEvB,oBAAIL,UAAU,kBAAd,SAAiCoB,IARtC,6BACE,kE,GAlDkCd,aEPtCwB,E,kDACJ,aAAe,IAAD,8BACZ,gBA4BFC,eAAiB,SAACC,GAChB,IAAMC,EAAaD,EAAEE,OAAOC,MAC5B,EAAKhB,SAAS,CACZiB,YAAaH,KAhCH,EAoCdI,aAAe,SAACL,GACdA,EAAEM,iBACF,EAAK7C,MAAM8C,QAAQC,KAAK,CACtBC,SAAU,UACV9B,OAAO,MAAD,OAAQ,EAAKa,MAAMY,gBAtC3B,EAAKZ,MAAQ,CAEXY,YAAa,IAJH,E,gEASZ,IAAM3B,EAAcL,KAAKX,MAAMiB,SAASC,OAElC+B,EADY,IAAI9B,gBAAgBH,GACLI,IAAI,KACrCT,KAAKe,SAAS,CACZiB,YAAaM,M,yCAIEjB,EAAWC,GAC5B,IAAMjB,EAAcL,KAAKX,MAAMiB,SAASC,OAElC+B,EADY,IAAI9B,gBAAgBH,GACLI,IAAI,KACjCY,EAAUf,SAASC,SAAWP,KAAKX,MAAMiB,SAASC,SACpDP,KAAKe,SAAS,CACZiB,YAAaM,IAEf5B,QAAQC,IAAIX,KAAKoB,MAAMY,gB,+BAoBzB,OACE,uBAAMpC,UAAU,cAAc2C,SAAUvC,KAAKiC,aAA7C,UACE,uBACEO,KAAK,SACLC,SAAUzC,KAAK2B,eACfe,KAAK,SACLX,MAAO/B,KAAKoB,MAAMY,aAAe,GACjCW,YAAY,cAEd,wBAAQH,KAAK,SAAS9C,GAAG,SAASE,UAAU,gBAA5C,SACE,mBAAGA,UAAU,2B,GAxDFM,aA+DN0C,cAAWlB,GCrELmB,E,uKAEjB,OACE,iCACE,qBAAIjD,UAAU,WAAd,UACE,6BACE,cAAC,IAAD,CACEkD,GAAI,CACFT,SAAU,UACV9B,OAAQ,gBAEVb,GAAG,YALL,yBAUF,6BACE,cAAC,IAAD,CACEoD,GAAI,CACFT,SAAU,UACV9B,OAAQ,YAEVb,GAAG,QALL,qBAUF,6BACE,cAAC,IAAD,CACEoD,GAAI,CACFT,SAAU,UACV9B,OAAQ,YAEVb,GAAG,QALL,8B,GA5BqBQ,aCsBZ6C,E,uKAEjB,OACE,eAAC,IAAD,CAAeC,SAAS,qBAAxB,UACE,gCACE,qBAAKpD,UAAU,cAAf,SACE,qBAAKA,UAAU,QAAf,SACE,oBAAIA,UAAU,aAAd,8BAIJ,cAAC,EAAD,OAEF,qBAAKA,UAAU,WAAf,SAEE,cAAC,EAAD,MAEF,qBAAKA,UAAU,eAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAUL,GAAG,eACjD,cAAC,IAAD,CAAOI,KAAK,UAAUE,UAAWjD,gB,GApBZD,aCblBmD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASV,OAAO,cAAC,EAAD,IAASW,SAASC,eAAe,SAKjDV,M","file":"static/js/main.a4794c08.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Photo = (props) => {\n  const url = `https://live.staticflickr.com/${props.data.server}/${props.data.farm}/${props.data.id}_${props.data.secret}.jpg`;\n  return (\n    <li className=\"photo-container\">\n      <img src={url} alt=\"\" className=\"photo-container\" />\n    </li>\n  );\n};\n\nexport default Photo;\n","import React, { Component } from \"react\";\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <div className=\"not-found\">\n        <h1>No Results Found</h1>\n        <p>Your search for '{this.props.searchQuery}' returned no results.</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport apiKey from \"../config\";\n\nimport Photo from \"./Photo\";\nimport NotFound from \"./NotFound\";\n\n/**\n * This component is the bread and butter of the entire application:\n * It fetches the data\n * Using a single source of truth, for what kind of data (kittens, mountains, stars, whatever)\n * That data which is used during fetch, comes from the URL, not the search bar.\n */\n\n//  TODO: listen for changes to URL, fetch the data when it changes. Look at react documentation for life cycle methods to do this.\nexport default class PhotoContainer extends Component {\n  constructor() {\n    super();\n    // single source of truth; never duplicated anywhere.\n    this.state = {\n      photos: [],\n    };\n  }\n\n  componentDidMount() {\n    // this does execute on initialRender\n    this.updatePhotosState();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // this does not execute on initialRender\n    if (prevProps.location.search !== this.props.location.search) {\n      this.updatePhotosState();\n    }\n  }\n\n  updatePhotosState = () => {\n    const queryString = this.props.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const searchQuery = urlParams.get(\"q\");\n    console.log(searchQuery);\n    axios\n      .get(\n        `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${searchQuery}&per_page=24&format=json&nojsoncallback=1`\n      )\n      .then((response) => {\n        this.setState({\n          photos: response.data.photos.photo,\n        });\n      })\n      .catch((error) => {\n        console.log(\"Error fetching and parsing data:\", error);\n      });\n  };\n\n  render() {\n    const queryString = this.props.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const searchQuery = urlParams.get(\"q\");\n    const photos = this.state.photos.map((photo, index) => (\n      <Photo data={this.state.photos[index]} key={photo.id} />\n    ));\n    if (!this.props.location.search) {\n      return (\n        <h2>\n          <i>Please enter a search term.</i>\n        </h2>\n      );\n    }\n    if (this.state.photos.length < 1) {\n      return <NotFound searchQuery={searchQuery} />;\n    } else {\n      return <ul className=\"photo-container\">{photos}</ul>;\n    }\n  }\n}\n","let apiKey = \"5e506bd15f5ff6b73f686a702884a2d1\";\n\nexport default apiKey;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\n/**\n * This component updates the source of truth, but it also listens to the source of truth (the url)\n * on text input Change, it updates the URL (writing)\n * on URL change, it updates the text input (reading)\n */\n\nclass Search extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // this value is rightly distinct from the URL param.\n      searchValue: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const queryString = this.props.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const newSearchValue = urlParams.get(\"q\");\n    this.setState({\n      searchValue: newSearchValue,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const queryString = this.props.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const newSearchValue = urlParams.get(\"q\");\n    if (prevProps.location.search !== this.props.location.search) {\n      this.setState({\n        searchValue: newSearchValue,\n      });\n      console.log(this.state.searchValue);\n    }\n  }\n\n  onSearchChange = (e) => {\n    const searchTerm = e.target.value;\n    this.setState({\n      searchValue: searchTerm,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.history.push({\n      pathname: \"/search\",\n      search: `?q=${this.state.searchValue}`,\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"search\"\n          onChange={this.onSearchChange}\n          name=\"search\"\n          value={this.state.searchValue || \"\"}\n          placeholder=\"Search...\"\n        />\n        <button type=\"submit\" id=\"submit\" className=\"search-button\">\n          <i className=\"fas fa-search\"></i>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Search);\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default class Nav extends Component {\n  render() {\n    return (\n      <header>\n        <ul className=\"main-nav\">\n          <li>\n            <NavLink\n              to={{\n                pathname: \"/search\",\n                search: \"?q=mountains\",\n              }}\n              id=\"mountains\"\n            >\n              Mountains\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to={{\n                pathname: \"/search\",\n                search: \"?q=trees\",\n              }}\n              id=\"trees\"\n            >\n              Trees\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to={{\n                pathname: \"/search\",\n                search: \"?q=stars\",\n              }}\n              id=\"stars\"\n            >\n              Stars\n            </NavLink>\n          </li>\n        </ul>\n      </header>\n    );\n  }\n}\n","/*\n * High level principles for app:\n * (1) Single Source of Truth: for all values and data\n * (2) Separation of Concerns: only pass data as necessary\n */\n\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\n\n//App Components\nimport PhotoContainer from \"./components/PhotoContainer\";\nimport Search from \"./components/Search\";\nimport Nav from \"./components/Nav\";\n\n/**\n * Notes on Application state:\n * (1) this.state.query (what does this do? A: populates search bar; what is it named? A: searchValue; is it necessary at all? A: yes)\n * (2) the url value ?q=xyz (query param; defined as queryState)\n * The source of truth is (2)\n * We are both reading and writing (1)\n * We are only writing (2)\n * TODOs:\n * (A) We are both reading and writing (2)\n * (B) (1) is subordinate to (2)\n **/\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename=\"/react_gallery_app\">\n        <div>\n          <div className=\"main-header\">\n            <div className=\"inner\">\n              <h1 className=\"main-title\">Photo Search</h1>\n            </div>\n          </div>\n          {/* has local state, to populate search; updates url with new query state */}\n          <Search />\n        </div>\n        <div className=\"main-nav\">\n          {/* updates url with new query state */}\n          <Nav />\n        </div>\n        <div className=\"main-content\">\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/search\" />} />\n            <Route path=\"/search\" component={PhotoContainer} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}